/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      alpha.liquid;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

#include "../constant/globalTransport"

internalField   uniform 0;

boundaryField
{
    cyl2
    {
        type            codedMixed;
        refValue        uniform 0;
        refGradient     uniform 0;
        valueFraction   uniform 0;
        name            spargeralphaliq1;
        code            
        #{
            const fvPatch& boundaryPatch = patch();
            const vectorField& Cf = boundaryPatch.Cf();
            vectorField nhat = this->patch().nf();
            scalar t=db().time().value();

            forAll(Cf, faceI)
            {
                if(fabs(nhat[faceI][0]) < 0.95)
                {
                   //pure dirichlet
                   this->valueFraction()[faceI]=1.0;

                   //liq fraction is 0
                   this->refValue()[faceI]=0.0;
                   this->refGrad()[faceI]=0.0;
                }
                else
                {
                   //homogenous neumann
                   this->valueFraction()[faceI] = 0.0;
                   this->refValue()[faceI]      = 0.0;
                   this->refGrad()[faceI]       = 0.0;
                }
            }
        #};
    }
    cyl4
    {
        type            codedMixed;
        refValue        uniform 0;
        refGradient     uniform 0;
        valueFraction   uniform 0;
        name            spargeralphaliq2;
        code            
        #{
            const fvPatch& boundaryPatch = patch();
            const vectorField& Cf = boundaryPatch.Cf();
            vectorField nhat = this->patch().nf();
            scalar t=db().time().value();

            forAll(Cf, faceI)
            {
                if(fabs(nhat[faceI][1]) < 0.95)
                {
                   //pure dirichlet
                   this->valueFraction()[faceI]=1.0;

                   //liq fraction is 0
                   this->refValue()[faceI]=0.0;
                   this->refGrad()[faceI]=0.0;
                }
                else
                {
                   //homogenous neumann
                   this->valueFraction()[faceI] = 0.0;
                   this->refValue()[faceI]      = 0.0;
                   this->refGrad()[faceI]       = 0.0;
                }
            }
        #};
    }
    cyl1
    {
        type            zeroGradient;
    }
    cyl3
    {
        type            zeroGradient;
    }
    outlet
    {
        type            inletOutlet;
        phi             phi.liquid;
        inletValue      uniform 0;
        value           uniform 0;
    }
    walls
    {
        type            zeroGradient;
    }
    pipes
    {
        type            zeroGradient;
    }
}

// ************************************************************************* //
