/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       volVectorField;
    object      U.gas;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

#include "../constant/globalTransport"

Usy #codeStream
{
    code
    #{
        os<<$targetUs / $inletAlphaGas * $totalArea / $inletArea / $presfactor ;
    #}; 
};

internalField   uniform (0 0 0);


boundaryField
{
    cyl2
    {
        type            codedFixedValue;
        value           uniform (0 0 0);
        name            spargervelgas1;
        code            
        #{
            const fvPatch& boundaryPatch = patch();
            const vectorField& Cf = boundaryPatch.Cf();
            vectorField& field = *this;
            scalar us = 0.03; //m/s
            vectorField nhat = this->patch().nf();
            scalar t=db().time().value();

            forAll(Cf, faceI)
            {
                field[faceI] = vector(0,0,0);
                if(fabs(nhat[faceI][0]) < 0.95)
                {
                   field[faceI] = vector(-us*nhat[faceI][0],-us*nhat[faceI][1],-us*nhat[faceI][2]);
                }
            }
        #};
    }
    cyl4
    {
        type            codedFixedValue;
        value           uniform (0 0 0);
        name            spargervelgas1;
        code            
        #{
            const fvPatch& boundaryPatch = patch();
            const vectorField& Cf = boundaryPatch.Cf();
            vectorField& field = *this;
            scalar us = 0.03; //m/s
            vectorField nhat = this->patch().nf();
            scalar t=db().time().value();

            forAll(Cf, faceI)
            {
                field[faceI] = vector(0,0,0);
                if(fabs(nhat[faceI][1]) < 0.95)
                {
                   field[faceI] = vector(-us*nhat[faceI][0],-us*nhat[faceI][1],-us*nhat[faceI][2]);
                }
            }
        #};
    }
    outlet
    {
        type               pressureInletOutletVelocity;
        phi                phi.gas;
        value           $internalField;
    }
    walls
    {
        type               slip;
    }
    pipes
    {
        type               slip;
    }
    cyl1
    {
        type               slip;
    }
    cyl3
    {
        type               slip;
    }
}

// ************************************************************************* //
