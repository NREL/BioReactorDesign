/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     multiphaseEulerFoam;

startFrom       latestTime;//startTime;

startTime       0;

stopAt          endTime;

endTime         100;

deltaT          0.0001;

writeControl    adjustableRunTime;

writeInterval   2;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.5;

maxDeltaT       0.0005;


functions
{

    #includeFunc    writeObjects(d.gas)
    #includeFunc    writeObjects(thermo:rho.gas)
    #includeFunc    writeObjects(thermo:rho.liquid)

    fieldAverage
    {
        type            fieldAverage;
        libs            (fieldFunctionObjects);
        writeControl    writeTime;
    	timeStart       0;
        fields
        (
            alpha.gas
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }
        );
    };

    writeHoldup
    {
        type coded;
        libs (utilityFunctionObjects);
        active true;
        
        // Name of on-the-fly generated functionObject
        name writeHoldup;
        codeWrite
        #{
    		const volScalarField& alpha_mean = db().lookupObject<volScalarField>("alpha.gasMean");
    		const volScalarField& alpha = db().lookupObject<volScalarField>("alpha.gas");
				
    		scalar volume = gSum(mesh().V());
    		scalar gas_holdup_mean     = gSum(fvc::volumeIntegrate(alpha_mean))/volume;
     		scalar gas_holdup          = gSum(fvc::volumeIntegrate(alpha))/volume;
     		   		
            if (Pstream::master()){
               std::ofstream file;
               file.open ("holdup.csv", std::ofstream::out | std::ofstream::app);
               file << mesh().time().value() << " , " << gas_holdup
               << " , " << gas_holdup_mean <<  std::endl;
               file.close();
            }    		
        #};

    };
}
//functions
//{
//    #includeFunc fieldAverage(U.air, U.water, alpha.air, p)
//}


// ************************************************************************* //
