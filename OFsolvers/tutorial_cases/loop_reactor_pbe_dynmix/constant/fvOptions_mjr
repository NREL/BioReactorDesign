/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     5.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
paddlesource
{
    type            coded;
    selectionMode   all;
    active          yes;
    name            sourceTime;
    field           U.liquid;
    
    vectorCodedSourceCoeffs
    {
        selectionMode   all;

        fields          (U.liquid);
    
        codeInclude
        #{

        #};
   
        codeCorrect
        #{

        #}; 

        codeSetValue
        #{

        #};

        codeAddSup
        #{
            const scalarField& V = mesh_.V();
            vectorField& Usource = eqn.source();
            const vectorField& C = mesh_.C();
    
            const volScalarField& rhoL = 
            mesh().lookupObject<volScalarField>("thermo:rho.liquid");
    
            const volScalarField& alphaL = 
            mesh().lookupObject<volScalarField>("alpha.liquid");

            double pi=3.141592654;
            double source_pt_x=0.025;
            double source_pt_y=0.025;
            double source_pt_z=0.025;
            double disk_rad=0.015;
            double disk_area=pi*disk_rad*disk_rad;
            double power=300e12;
            double smear_factor=10.0;

            Info << "#########PLOP 1" << endl;

            forAll(C,i)
            {
                double v2=pow((4.0*power/rhoL[i]/disk_area),0.333333);
                double Thrust=0.5*rhoL[i]*v2*v2*disk_area;

                double dist2=(C[i].x()-source_pt_x)*(C[i].x()-source_pt_x);
                dist2 += (C[i].y()-source_pt_y)*(C[i].y()-source_pt_y);
                dist2 += (C[i].z()-source_pt_z)*(C[i].z()-source_pt_z);

                double epsilon=pow(V[i],0.33333)*smear_factor;

                double sourceterm=alphaL[i]*(Thrust/pow(pi,1.5)/pow(epsilon,3.0))*
                                        exp(-dist2/(epsilon*epsilon));

                Usource[i][1] +=  sourceterm*V[i];

            }
        #};
        
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
         #};
    }
    
    sourceTimeCoeffs
    {
        $vectorCodedSourceCoeffs;
    }
}
// ************************************************************************* //
