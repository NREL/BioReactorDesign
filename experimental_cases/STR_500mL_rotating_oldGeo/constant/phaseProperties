/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  12
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "constant";
    object      phaseProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#include "$FOAM_CASE/constant/globalVars"

phases (gas liquid);

populationBalances (bubbles);

gas
{
    type            multiComponentPhaseModel;//pureIsothermalPhaseModel;

    diameterModel   velocityGroup;

    velocityGroupCoeffs
    {
        populationBalance    bubbles;

        shapeModel           spherical;

        sizeGroups
        (
            {dSph  1e-3;}
            {dSph  1.5e-3;}
            {dSph  2e-3; }
            {dSph  2.5e-3; }
            {dSph  3e-3; }
            {dSph  3.5e-3; }
            {dSph  4e-3; }
            {dSph  4.5e-3; }
            {dSph  5e-3; }
            {dSph  5.5e-3; }
            {dSph  6e-3; }
            {dSph  6.5e-3; }
            {dSph  7e-3; }
            {dSph  7.5e-3; }
            {dSph  8e-3; }
            {dSph  8.5e-3; }
            {dSph  9e-3; }
            {dSph  9.5e-3; }
            {dSph  10e-3; }
            {dSph  10.5e-3; }
            {dSph  11e-3; }
        );
    }

    residualAlpha   1e-2;
}

populationBalanceCoeffs
{
    bubbles
    {
        continuousPhase liquid;

        coalescenceModels
        (
            LehrMilliesMewes
            {}
        );

        binaryBreakupModels
        (
            LehrMilliesMewes
            {}
        );

        breakupModels
        ();

        driftModels
        (
            densityChange
            {}
        );

        nucleationModels
        ();
    }
}

liquid
{
    type            multiComponentPhaseModel;

    diameterModel   constant;

    constantCoeffs
    {
        d               1e-4;
    }
    Sc   #codeStream 
    { 
        code 
        #{ 
            os  << ($LeLiqMix * $CpMixLiq * $muMixLiq / $kThermLiq); 
        #}; 
    }; 

    residualAlpha   1e-6;
}

surfaceTension
{
    gas_liquid
    {
        type            constant;
        sigma           $sigmaLiq;
    }
}


blending
{
    default
    {
        type            linear;
        minFullyContinuousAlpha.gas 0.7;
        minPartlyContinuousAlpha.gas 0.3;
        minFullyContinuousAlpha.liquid 0.7;
        minPartlyContinuousAlpha.liquid 0.3;
    }

    segregated
    {
        type            linear;
        minFullyContinuousAlpha.gas 0.7;
        minPartlyContinuousAlpha.gas 0.5;
        minFullyContinuousAlpha.liquid 0.7;
        minPartlyContinuousAlpha.liquid 0.5;
    }

    heatAndDiffusiveMassTransfer
    {
        type            linear;
        minPartlyContinuousAlpha.gas 0;
        minFullyContinuousAlpha.gas 1;
        minPartlyContinuousAlpha.liquid 0;
        minFullyContinuousAlpha.liquid 1;
    }


}


interfaceCompression
{
    gas_liquid 1;
}

interfaceTracking
{
    vSquareTol 0.7;
    signAnisotropyTol 0.1;
};

// ************************************************************************* //
