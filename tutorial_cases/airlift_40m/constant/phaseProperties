/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      phaseProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "$FOAM_CASE/constant/globalVars"

type    interfaceCompositionPhaseChangeMultiphaseSystem;

phases (gas liquid);

gas
{
    type            multiComponentPhaseModel;
    // diameterModel   isothermal;
    // isothermalCoeffs
    // {
    //     d0              3e-3;
    //     p0              1e5;
    // }
    diameterModel constant;
    constantCoeffs
    {
        d 0.006; // m
    }
    Sc              0.7;

    residualAlpha   1e-6;
}

liquid
{
    type            multiComponentPhaseModel;
    diameterModel constant;
    constantCoeffs
    {
        d               1e-4; //1e-4; helps prevent liquid drops in head space, JJS 4/14/16
    }
    residualAlpha   1e-6;
}

blending
{
    default
    {
        type            linear;
        minFullyContinuousAlpha.gas 0.7;
        minPartlyContinuousAlpha.gas 0.3;
        minFullyContinuousAlpha.liquid 0.7;
        minPartlyContinuousAlpha.liquid 0.3;
    }
    
    heatTransfer
    {
        type            linear;
        minFullyContinuousAlpha.gas 1;
        minPartlyContinuousAlpha.gas 0;
        minFullyContinuousAlpha.liquid 1;
        minPartlyContinuousAlpha.liquid 0;
    }
    
    massTransfer
    {
        $heatTransfer;
    }

}

surfaceTension
(
    (gas and liquid)
    {
        type            constant;
        sigma           $sigmaLiq;
    }
);

aspectRatio
(
    (gas in liquid)
    {
        type            constant;
        E0              1.0;
    }

    (liquid in gas)
    {
        type            constant;
        E0              1.0;
    }
);

drag
(
    (gas in liquid)
    {
        //type            SchillerNaumann;
        type            Grace;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }

    (liquid in gas)
    {
        type            SchillerNaumann;
        residualRe      1e-3;
        swarmCorrection
        {
            type        none;
        }
    }
);

virtualMass
(
    (gas in liquid)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }

    (liquid in gas)
    {
        type            constantCoefficient;
        Cvm             0.5;
    }
);

/*
From docs: These models describe the composition in phase 1 of the supplied pair 
at the interface with phase 2.
DWH: I verified which Le goes where by determining the corresponding rho called by
each model.
*/
interfaceComposition.gas
(
    (gas and liquid)
    {
        type saturated;
        species ( H2O );
        Le $LeGas;
        saturationPressure
        {
            type ArdenBuck;
        }
    }
);

interfaceComposition.liquid
(
    (liquid and gas)
    {
        type Henry;
        species (O2);
        k ($He_O2); 
        Le $LeLiqMix;
    }
);

/*
DWH: As far as I can tell, the Le defined here are whatever shows up in the K/D eqn 
in the mass transfer model. (I.e. Le_liq shows up in Frossling and Higbie. 
Le does not appear in spherical at all, but the constructor still expects Le 
in the input dict.)
When K/D is returned and multiplied by D to compute mass transfer, that D is 
obtained from the InterfaceCompositionModel and not this Le.
*/

diffusiveMassTransfer.gas
(
    (gas in liquid)
    {
        type spherical;
        Le 1.0;
    }

    (liquid in gas)
    {
        type Higbie;
        //type Frossling;
        Le $LeLiqMix;
    }
);

diffusiveMassTransfer.liquid
(
    (gas in liquid)
    {
        type Higbie;
        //type Frossling;
        Le $LeLiqMix;
    }

    (liquid in gas)
    {
        type spherical;
        Le 1.0;
    }
);


heatTransfer.gas
(
    (gas in liquid)
    {
        type spherical;
        residualAlpha 1e-4;
    }

    (liquid in gas)
    {
        type RanzMarshall;
        residualAlpha 1e-4;
    }
);


heatTransfer.liquid
(
    (gas in liquid)
    {
        type RanzMarshall;
        residualAlpha 1e-4;
    }

    (liquid in gas)
    {
        type spherical;
        residualAlpha 1e-4;
    }
);

lift
(
);

wallLubrication
(
    (gas in liquid)
    {
        type            Antal;
        Cw1             -0.01;
        Cw2             -0.05;
    }

    (liquid in gas)
    {
        type            Antal;
        Cw1             -0.01;
        Cw2             -0.05;
    }
);

turbulentDispersion
(
    (gas in liquid)
    {
        type            LopezDeBertodano;
        Ctd             0.5;
    }

    (liquid in gas)
    {
        type            LopezDeBertodano;
        Ctd             0.5;
    }
);

phaseTransfer
(
);

// Minimum allowable pressure
pMin            10000;

// ************************************************************************* //
